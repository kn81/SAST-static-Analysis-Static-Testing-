1) Cross-Site Scripting: Reflected ->
        The method authenticate() in FGLoginController.java sends unvalidated data to a web browser on line 46, which can result in the
        browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code
          
          Example 3: The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on 
            the value received from an Android intent.
            
            WebView webview = (WebView) findViewById(R.id.webview);
            webview.getSettings().setJavaScriptEnabled(true);
            String url = this.getIntent().getExtras().getString("url");
            webview.loadUrl(url);
            
            As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur 
            when an attacker causes a user to supply dangerous content to a vulnerable web application,
=============================================================================================================

2) Insecure SSL: Android Hostname Verification Disabled
	The call to setHostnameVerifier() in CustomSSLSocketFactory.java does not verify the hostname when making a SSL connection. 
	This leaves the application vulnerable to a man-in-the-middle attack.Hostname verification is disabled when making SSL connections.

Explanation
	Use of AllowAllHostnameVerifier() or SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER essentially turns off hostname verification when using 
	SSL connections. This is equivalent to trusting all certificates.

Example 1:The application sets the hostname verifier as below.
	...
	SSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);
	sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
	...

This application when trying to connect to https://safesecureserver.banking.com would readily accept a certificate issued to https://hackedserver.
banking.com.The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.

Standards and Best Practices
OWASP 2013
A6 - Sensitive Data Exposure
OWASP 2017
A3 - Sensitive Data Exposure
OWASP 2014 Mobile Top 10
M3 - Insufficient Transport Layer Protection

================================================================================================
3) Insecure Transport
	The call to Scheme() in CustomSSLSocketFactory.java on line 95 uses an unencrypted protocol instead of an 
	encrypted protocol to communicate with the server.

Explanation
All communication over HTTP, FTP or gopher is unauthenticated and unencrypted. It is thus, subject to compromise,

Example 1: The following example reads data using the HTTP protocol (versus using HTTPS).
	
	URL url = new URL("http://www.android.com/");
	HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
	try {
	InputStream in = new BufferedInputStream(urlConnection.getInputStream());
	readStream(in);
	...
	}

The incoming stream,instream, may have been compromised as it is delivered over an unencrypted and unauthenticated channel.

Standards and Best Practices
OWASP 2013
A6 - Sensitive Data Exposure
OWASP 2017
A3 - Sensitive Data Exposure
OWASP 2014 Mobile Top 10
M3 - Insufficient Transport Layer Protection

Code
----
public static HttpClient getNewHttpClient() {
		try {
			KeyStore trustStore = KeyStore.getInstance(KeyStore
					.getDefaultType());
			trustStore.load(null, null);
			SSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);
			sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
			HttpParams params = new BasicHttpParams();
			SchemeRegistry registry = new SchemeRegistry();

	/* below code uses http instead of HTTPS
			registry.register(new Scheme("http", PlainSocketFactory
					.getSocketFactory(), 80));
       */
			registry.register(new Scheme("https", sf, 443));

			ClientConnectionManager ccm = new ThreadSafeClientConnManager(
					params, registry);

			return new DefaultHttpClient(ccm, params);
		} catch (Exception e) {
			return new DefaultHttpClient();
		}
	}

===============================================================================
4) Password Management: Insecure Submission
----------------------------------------
Summary
The form in register.html submits a password as part of an HTTP GET request on line 26, which will cause the password to be displayed, 
logged, and stored in the browser cache.

Explanation
By convention, the parameters associated with an HTTP GET request are not treated as sensitive data, so web servers log them, proxies 
cache them, and web browsers do not make an effort to conceal them.

Example 1: In the example below, new user password is submitted via an HTTP GET request.

<form method="get">
Name of new user: <input type="text" name="username">
Password for new user: <input type="password" name="user_passwd">
<input type="submit" name="action" value="Create User">
</form>

Standards and Best Practices
OWASP 2013
A6 - Sensitive Data Exposure
OWASP 2017
A3 - Sensitive Data Exposure
OWASP 2014 Mobile Top 10
M4 - Unintended Data Leakage

CODE
-----
		<div data-role="content" data-theme="a">
			<form>
				<label for="firstname">First Name</label> <input type="text"
					name="firstname" id="firstname" value=""> <label
					for="lastname">Last Name</label> <input type="text" name="lastname"
					id="lastname" value=""><label for="username">Username</label>
				<input type="text" name="username" id="username" value=""> <label
					for="password">Password</label> <input type="password"
					name="password" id="password" value=""> <label
                                 
                                 /* in below password is sending via HTTP
                                 -------------------------------------------
					for="confirmpassword">Confirm Password</label> <input
					type="password" name="confirmpassword" id="confirmpassword"
					value=""><a href="#" data-role="button" data-inline="true">Register</a>
			</form>
		</div>

==========================================================================================
5) Privacy Violation
------------------
Summary
The method doRegistration() in FGRegisterController.java mishandles confidential information, which can 
compromise user privacy and is often illegal

Explanation
Privacy violations occur when:

1. Private user information enters the program.

In this case the data comes from in Validators.java at line 92.

2. The data is written to an external location, such as the console, file system, or network.

In this case the data is passed to in FGRegisterController.java at line 43

Example 1: The following code contains a logging statement that tracks the contents of records added to a database 
by storing them in a log file. Among other values that are stored, the getPassword() function returns the user-supplied 
plaintext password associated with the account.


pass = getPassword();
...
dbmsLog.println(id+":"+pass+":"+type+":"+tstamp);

Example 2: The code below reads username and password for a given site from an Android WebView store and broadcasts them to all the registered receivers.

...
webview.setWebViewClient(new WebViewClient() {
public void onReceivedHttpAuthRequest(WebView view,
HttpAuthHandler handler, String host, String realm) {
String[] credentials = view.getHttpAuthUsernamePassword(host, realm);
String username = credentials[0];
String password = credentials[1];
Intent i = new Intent();
i.setAction("SEND_CREDENTIALS");
i.putExtra("username", username);
i.putExtra("password", password);
view.getContext().sendBroadcast(i);
}
});
...
here are several problems with this example.
1. First of all, by default, WebView credentials are stored in plaintext and are not hashed
2. Second, plaintext credentials are broadcast to all the registered receivers, which means that any receiver registered to listen to intents with 
	the SEND_CREDENTIALS action will receive the message. 
3. The broadcast is not even protected with a permission to limit the number of recipients, even though in this case, we do not recommend using permissions as a fix.


CODE
------
static public ArrayList<String> validateRegistrationFields(
			String firstName, String lastName, String userName, String password) {

		ArrayList<String> errors = new ArrayList<String>();
		if (!isFormatValid(firstName, FIRST_LAST_NAME_FORMAT))
			errors.add(Constants.FIRST_NAME_INVALID);
		if (!isFormatValid(lastName, FIRST_LAST_NAME_FORMAT))
			errors.add(Constants.LAST_NAME_INVALID);
		if (!isFormatValid(userName, USERNAME_FORMAT))
			errors.add(Constants.USERNAME_FORMAT_INVALID);
		if (!validatePasswordLength(password))

	/* in below code user privacy information is storing in log file */

			errors.add(Constants.PASSWORD_FORMAT_INVALID);
		return errors;
	}

Standards and Best Practices
OWASP 2013
A6 - Sensitive Data Exposure
OWASP 2017
A3 - Sensitive Data Exposure
OWASP 2014 Mobile Top 10
M2 - Insecure Data Storage

====================================================================================================
6) Android Bad Practices: Missing Component Permission
---------------------------------------------------
On line 68 of AndroidManifest.xml the program does not protect this public component with a permission.

Explanation
------------------
Any application can access public components that are not explicitly assigned an access permission in their manifest definition.

Example 1: Below is an example of an Android activity with an intent-filter and no explicit access permission set.

 <activity android:name=".AndroidActivity"/> 
   <intent-filter android:label="activityName"/> 
    <action android:name=".someFunAction"/> 
   </intent-filter> 
    ... 
 </activity> 

This activity can be exploited by malicious applications.


Standards and Best Practices

OWASP 2013
â€¢A5 - Security Misconfiguration


OWASP 2017
â€¢A6 - Security Misconfiguration


OWASP 2014 Mobile Top 10
â€¢M5 - Poor Authorization and Authentication

CODE
----
<activity
            android:name=".activities.ViewCheckinActivity"
            android:exported="true"
/* below code is vulnerable
            android:label="@string/view_checkin" >
*/
        </activity>

Recommendation
------------------
Components without explicit access permissions should be exceptions. Unless, the component is really intended to be 
accessible to all, developers should protect components from misuse by malicious applications by explicitly 
the access permissions in the manifest file.

Example 2: Below is the declaration of the activity component from above re-written with explicitly assigned access permission.

 <activity android:name=".AndroidActivity" android:permission="FriendsOnly"/> 
   <intent-filter android:label="activityName"/> 
    <action android:name=".someFunAction"/> 
   </intent-filter> 
   ... 
 </activity> 


References
-----------
1.A2 Broken Access Control, Standards Mapping - OWASP Top 10 2004 - (OWASP 2004)
2.A6 Security Misconfiguration, Standards Mapping - OWASP Top 10 2010 - (OWASP 2010)
3.AC, Standards Mapping - FIPS200 - (FISMA)
4.AC-3 Access Enforcement, Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4)
5.CWE ID 265, Standards Mapping - Common Weakness Enumeration - (CWE)

=============================================================================
7)


            
